function composeStyleInner(e,r,t){if("string"!=typeof e)return;let o=r.replace(/[^\w]/g,"");return/:root/.test(e)&&console.warn("[DEPRECATION] the :root pseudo selector is deprecated, use :component or :wrapper instead"),e=(e=e.replace(/{/g,"{\n").replace(/}/g,"}\n").replace(/^(\s+)?:(component|wrapper|root)(\s+)?{/gm,r+" {").replace(/:(component|wrapper|root)/g,"").replace(/(@(?:[\w-]+-)?keyframes\s+)([\w-_]+)/g,`$1 ${o}-$2`).replace(/((?:[\w-]+-)?animation(?:-name)?(?:\s+)?:(?:\s+))([\w-_]+)/g,`$1 ${o}-$2`).replace(/\/\*[\s\S]*?\*\/|([^:]|^)\/\/.*$/gm,"").replace(/[^\s].*{/gm,(e=>{if(/^(@|:host|(from|to|\d+%)[^-_])/.test(e))return e;let t=e.split(",");const o=new RegExp(`^${r.replace(/[[\]]/g,"\\$&")}(\\s+)?{`);for(let e=0;e<t.length;e++)t[e]=t[e].trim(),o.test(t[e])||(/^:global/.test(t[e])?t[e]=t[e].replace(":global",""):t[e]=`${r} ${t[e]}`);return e=t.join(",")}))).replace(/\s{2,}/g," ").replace(/{ /g,"{").replace(/ }/g,"}").replace(/\s:/g,":").replace(/\n/g,"").trim()}export default composeStyleInner;