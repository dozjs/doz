import{REGEX,ATTR,PROPS_ATTRIBUTES}from"../constants.js";import objectPath from"../utils/object-path.js";import isListener from"../utils/is-listener.js";import{isDirective}from"../directives/helpers.js";import makeSureAttach from"../component/make-sure-attach.js";import booleanAttributes from"../utils/boolean-attributes.js";function isEventAttribute(t){return isListener(t)}function setAttribute(t,e,a,i,n,r){if("data-attributeoriginaletagname"===e)return;if(makeSureAttach(t),t._dozAttach[PROPS_ATTRIBUTES]||(t._dozAttach[PROPS_ATTRIBUTES]={}),t._dozAttach[PROPS_ATTRIBUTES][e]=a,"key"===e)return void(void 0===t._dozAttach.key&&(t._dozAttach.key=a));let u=isDirective(e);u&&(t._dozAttach.hasDirective=!0),(!isCustomAttribute(e)&&"function"!=typeof a&&"object"!=typeof a||u)&&(void 0===a&&(a=""),"class"!==e||r?void 0===t[e]||r?(e.startsWith("data-")||e.startsWith("aria-")||"role"===e||"for"===e||r)&&t.setAttribute(e,a):(""===a&&booleanAttributes.indexOf(e)>-1&&(a=!0),t[e]=a):t.className=a)}function updateAttribute(t,e,a,i,n,r,u){setAttribute(t,e,a,n,r,u),n.$$afterAttributeUpdate(t,e,a)}function updateAttributes(t,e,a={},i,n,r){const u=Object.assign({},e,a);let c,o=[],s=Object.keys(u);for(let u=0;u<s.length;u++)if(c=s[u],t&&1===t.nodeType&&e[c]!==a[c]){updateAttribute(t,c,e[c],a[c],i,n,r);let u={};u[c]=e[c],o.push(u)}return o}function isCustomAttribute(t){return isEventAttribute(t)||t===ATTR.FORCE_UPDATE}function extractEventName(t){return t.slice(2).toLowerCase()}function trimQuotes(t){return t.replace(REGEX.TRIM_QUOTES,"$1")}function addEventListener($target,name,value,cmp,cmpParent){if(!isEventAttribute(name))return;let alreadyFunction=!1;if("function"==typeof value&&(alreadyFunction=!0),"string"==typeof value){let t=value.match(REGEX.GET_LISTENER_SCOPE);if(t){let e=null,a=t[1],i=t[2];i&&(e=i.split(",").map((t=>"scope"===(t=trimQuotes(t.trim()))?cmpParent:t)));const n=objectPath(a,cmpParent);void 0!==n&&(value=e?n.bind(cmpParent,...e):n.bind(cmpParent))}else if(t=value.match(REGEX.GET_LISTENER),t){let e=null,a=t[1],i=t[2];i&&(e=i.split(",").map((t=>"this"===(t=trimQuotes(t.trim()))?cmp:t)));let n=a.match(REGEX.IS_PARENT_METHOD);n&&(a=n[1],cmp=cmp.parent);const r=objectPath(a,cmp);void 0!==r&&(value=e?r.bind(cmp,...e):r.bind(cmp))}}if("function"==typeof value)alreadyFunction?$target.addEventListener(extractEventName(name),value.bind(cmp)):$target.addEventListener(extractEventName(name),value);else if(value=value.replace(REGEX.THIS_TARGET,"$target"),value.match(REGEX.IS_LISTENER_SCOPE)||"scope"===value){const _func=function(){value=value.replace(/scope/g,"this"),eval(value)};$target.addEventListener(extractEventName(name),_func.bind(cmpParent))}else{const _func=function(){eval(value)};$target.addEventListener(extractEventName(name),_func.bind(cmp))}}function attach(t,e,a,i,n){let r;const u=Object.keys(e);for(let c=0,o=u.length;c<o;c++)r=u[c],addEventListener(t,r,e[r],a,i),setAttribute(t,r,e[r],a,i,n)}export{attach};export{updateAttributes};export default{attach:attach,updateAttributes:updateAttributes};